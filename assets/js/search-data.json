{
  
    
        "post0": {
            "title": "TEST",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gwonchankim.github.io/channee/ml/jupyter/2021/08/31/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4.html",
            "relUrl": "/ml/jupyter/2021/08/31/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4.html",
            "date": " • Aug 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "LightGBM!!",
            "content": "import lightgbm print(lightgbm.__version__) . 2.1.0 . LightGBM &#51201;&#50857; &#8211; &#50948;&#49828;&#53080;&#49888; Breast Cancer Prediction . from lightgbm import LGBMClassifier import pandas as pd import numpy as np from sklearn.datasets import load_breast_cancer from sklearn.model_selection import train_test_split dataset = load_breast_cancer() ftr = dataset.data target = dataset.target # 전체 데이터 중 80%는 학습용 데이터, 20%는 테스트용 데이터 추출 X_train, X_test, y_train, y_test=train_test_split(ftr, target, test_size=0.2, random_state=156 ) # 앞서 XGBoost와 동일하게 n_estimators는 400 설정. lgbm_wrapper = LGBMClassifier(n_estimators=400) # LightGBM도 XGBoost와 동일하게 조기 중단 수행 가능. evals = [(X_test, y_test)] lgbm_wrapper.fit(X_train, y_train, early_stopping_rounds=100, eval_metric=&quot;logloss&quot;, eval_set=evals, verbose=True) preds = lgbm_wrapper.predict(X_test) pred_proba = lgbm_wrapper.predict_proba(X_test)[:, 1] . [1] valid_0&#39;s binary_logloss: 0.614872 Training until validation scores don&#39;t improve for 100 rounds. [2] valid_0&#39;s binary_logloss: 0.550424 [3] valid_0&#39;s binary_logloss: 0.497095 [4] valid_0&#39;s binary_logloss: 0.449481 [5] valid_0&#39;s binary_logloss: 0.414368 [6] valid_0&#39;s binary_logloss: 0.381005 [7] valid_0&#39;s binary_logloss: 0.349425 [8] valid_0&#39;s binary_logloss: 0.325225 [9] valid_0&#39;s binary_logloss: 0.300915 [10] valid_0&#39;s binary_logloss: 0.283436 [11] valid_0&#39;s binary_logloss: 0.265498 [12] valid_0&#39;s binary_logloss: 0.250054 [13] valid_0&#39;s binary_logloss: 0.236562 [14] valid_0&#39;s binary_logloss: 0.22509 [15] valid_0&#39;s binary_logloss: 0.214741 [16] valid_0&#39;s binary_logloss: 0.206876 [17] valid_0&#39;s binary_logloss: 0.198085 [18] valid_0&#39;s binary_logloss: 0.190907 [19] valid_0&#39;s binary_logloss: 0.181494 [20] valid_0&#39;s binary_logloss: 0.173462 [21] valid_0&#39;s binary_logloss: 0.1672 [22] valid_0&#39;s binary_logloss: 0.160914 [23] valid_0&#39;s binary_logloss: 0.156162 [24] valid_0&#39;s binary_logloss: 0.152263 [25] valid_0&#39;s binary_logloss: 0.144638 [26] valid_0&#39;s binary_logloss: 0.140135 [27] valid_0&#39;s binary_logloss: 0.135741 [28] valid_0&#39;s binary_logloss: 0.132252 [29] valid_0&#39;s binary_logloss: 0.130786 [30] valid_0&#39;s binary_logloss: 0.13122 [31] valid_0&#39;s binary_logloss: 0.127583 [32] valid_0&#39;s binary_logloss: 0.125351 [33] valid_0&#39;s binary_logloss: 0.120765 [34] valid_0&#39;s binary_logloss: 0.116044 [35] valid_0&#39;s binary_logloss: 0.114636 [36] valid_0&#39;s binary_logloss: 0.115021 [37] valid_0&#39;s binary_logloss: 0.11225 [38] valid_0&#39;s binary_logloss: 0.112672 [39] valid_0&#39;s binary_logloss: 0.112078 [40] valid_0&#39;s binary_logloss: 0.111472 [41] valid_0&#39;s binary_logloss: 0.112868 [42] valid_0&#39;s binary_logloss: 0.113805 [43] valid_0&#39;s binary_logloss: 0.111621 [44] valid_0&#39;s binary_logloss: 0.113316 [45] valid_0&#39;s binary_logloss: 0.112703 [46] valid_0&#39;s binary_logloss: 0.112621 [47] valid_0&#39;s binary_logloss: 0.114047 [48] valid_0&#39;s binary_logloss: 0.11646 [49] valid_0&#39;s binary_logloss: 0.11804 [50] valid_0&#39;s binary_logloss: 0.117546 [51] valid_0&#39;s binary_logloss: 0.116963 [52] valid_0&#39;s binary_logloss: 0.117518 [53] valid_0&#39;s binary_logloss: 0.117933 [54] valid_0&#39;s binary_logloss: 0.118838 [55] valid_0&#39;s binary_logloss: 0.119101 [56] valid_0&#39;s binary_logloss: 0.120001 [57] valid_0&#39;s binary_logloss: 0.118411 [58] valid_0&#39;s binary_logloss: 0.118695 [59] valid_0&#39;s binary_logloss: 0.117512 [60] valid_0&#39;s binary_logloss: 0.117793 [61] valid_0&#39;s binary_logloss: 0.119033 [62] valid_0&#39;s binary_logloss: 0.118869 [63] valid_0&#39;s binary_logloss: 0.12047 [64] valid_0&#39;s binary_logloss: 0.11909 [65] valid_0&#39;s binary_logloss: 0.118759 [66] valid_0&#39;s binary_logloss: 0.121258 [67] valid_0&#39;s binary_logloss: 0.119557 [68] valid_0&#39;s binary_logloss: 0.119182 [69] valid_0&#39;s binary_logloss: 0.118941 [70] valid_0&#39;s binary_logloss: 0.118697 [71] valid_0&#39;s binary_logloss: 0.119549 [72] valid_0&#39;s binary_logloss: 0.120924 [73] valid_0&#39;s binary_logloss: 0.120274 [74] valid_0&#39;s binary_logloss: 0.122415 [75] valid_0&#39;s binary_logloss: 0.122802 [76] valid_0&#39;s binary_logloss: 0.121592 [77] valid_0&#39;s binary_logloss: 0.123246 [78] valid_0&#39;s binary_logloss: 0.125394 [79] valid_0&#39;s binary_logloss: 0.126496 [80] valid_0&#39;s binary_logloss: 0.126031 [81] valid_0&#39;s binary_logloss: 0.12885 [82] valid_0&#39;s binary_logloss: 0.129289 [83] valid_0&#39;s binary_logloss: 0.130373 [84] valid_0&#39;s binary_logloss: 0.131823 [85] valid_0&#39;s binary_logloss: 0.133759 [86] valid_0&#39;s binary_logloss: 0.133971 [87] valid_0&#39;s binary_logloss: 0.135448 [88] valid_0&#39;s binary_logloss: 0.137522 [89] valid_0&#39;s binary_logloss: 0.139486 [90] valid_0&#39;s binary_logloss: 0.141503 [91] valid_0&#39;s binary_logloss: 0.143603 [92] valid_0&#39;s binary_logloss: 0.145284 [93] valid_0&#39;s binary_logloss: 0.147958 [94] valid_0&#39;s binary_logloss: 0.145053 [95] valid_0&#39;s binary_logloss: 0.146998 [96] valid_0&#39;s binary_logloss: 0.145528 [97] valid_0&#39;s binary_logloss: 0.14453 [98] valid_0&#39;s binary_logloss: 0.146676 [99] valid_0&#39;s binary_logloss: 0.148082 [100] valid_0&#39;s binary_logloss: 0.148896 [101] valid_0&#39;s binary_logloss: 0.148408 [102] valid_0&#39;s binary_logloss: 0.15026 [103] valid_0&#39;s binary_logloss: 0.151574 [104] valid_0&#39;s binary_logloss: 0.154725 [105] valid_0&#39;s binary_logloss: 0.15821 [106] valid_0&#39;s binary_logloss: 0.158945 [107] valid_0&#39;s binary_logloss: 0.160266 [108] valid_0&#39;s binary_logloss: 0.158948 [109] valid_0&#39;s binary_logloss: 0.161068 [110] valid_0&#39;s binary_logloss: 0.164555 [111] valid_0&#39;s binary_logloss: 0.164262 [112] valid_0&#39;s binary_logloss: 0.163297 [113] valid_0&#39;s binary_logloss: 0.164523 [114] valid_0&#39;s binary_logloss: 0.163787 [115] valid_0&#39;s binary_logloss: 0.165961 [116] valid_0&#39;s binary_logloss: 0.163576 [117] valid_0&#39;s binary_logloss: 0.166783 [118] valid_0&#39;s binary_logloss: 0.168178 [119] valid_0&#39;s binary_logloss: 0.166892 [120] valid_0&#39;s binary_logloss: 0.170601 [121] valid_0&#39;s binary_logloss: 0.174079 [122] valid_0&#39;s binary_logloss: 0.175411 [123] valid_0&#39;s binary_logloss: 0.178159 [124] valid_0&#39;s binary_logloss: 0.17829 [125] valid_0&#39;s binary_logloss: 0.179993 [126] valid_0&#39;s binary_logloss: 0.1786 [127] valid_0&#39;s binary_logloss: 0.180176 [128] valid_0&#39;s binary_logloss: 0.182569 [129] valid_0&#39;s binary_logloss: 0.180566 [130] valid_0&#39;s binary_logloss: 0.182573 [131] valid_0&#39;s binary_logloss: 0.179911 [132] valid_0&#39;s binary_logloss: 0.181185 [133] valid_0&#39;s binary_logloss: 0.181359 [134] valid_0&#39;s binary_logloss: 0.184895 [135] valid_0&#39;s binary_logloss: 0.183728 [136] valid_0&#39;s binary_logloss: 0.187889 [137] valid_0&#39;s binary_logloss: 0.190915 [138] valid_0&#39;s binary_logloss: 0.194048 [139] valid_0&#39;s binary_logloss: 0.197882 [140] valid_0&#39;s binary_logloss: 0.198944 Early stopping, best iteration is: [40] valid_0&#39;s binary_logloss: 0.111472 . C: ProgramData Anaconda3 lib site-packages sklearn preprocessing label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size &gt; 0` to check that an array is not empty. if diff: . from sklearn.metrics import confusion_matrix, accuracy_score from sklearn.metrics import precision_score, recall_score from sklearn.metrics import f1_score, roc_auc_score # 수정된 get_clf_eval() 함수 def get_clf_eval(y_test, pred=None, pred_proba=None): confusion = confusion_matrix( y_test, pred) accuracy = accuracy_score(y_test , pred) precision = precision_score(y_test , pred) recall = recall_score(y_test , pred) f1 = f1_score(y_test,pred) # ROC-AUC 추가 roc_auc = roc_auc_score(y_test, pred_proba) print(&#39;오차 행렬&#39;) print(confusion) # ROC-AUC print 추가 print(&#39;정확도: {0:.4f}, 정밀도: {1:.4f}, 재현율: {2:.4f}, F1: {3:.4f}, AUC:{4:.4f}&#39;.format(accuracy, precision, recall, f1, roc_auc)) . get_clf_eval(y_test, preds, pred_proba) . 오차 행렬 [[33 4] [ 2 75]] 정확도: 0.9474, 정밀도: 0.9494, 재현율: 0.9740, F1: 0.9615, AUC:0.9933 . from lightgbm import plot_importance import matplotlib.pyplot as plt %matplotlib inline fig, ax = plt.subplots(figsize=(10, 12)) # 사이킷런 래퍼 클래스를 입력해도 무방. plot_importance(lgbm_wrapper, ax=ax) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x2497e27e5f8&gt; . print(dataset.feature_names) .",
            "url": "https://gwonchankim.github.io/channee/jupyter/ml/machinelearning/2021/08/31/_08_31_LightGBM.html",
            "relUrl": "/jupyter/ml/machinelearning/2021/08/31/_08_31_LightGBM.html",
            "date": " • Aug 31, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gwonchankim.github.io/channee/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gwonchankim.github.io/channee/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "머신러닝, 딥러닝, AI를 공부하는 사람입니다. 최대한 다양한 내용을 다루어 보고자 합니다. 여러 코멘트, 조언은 언제나 환영합니다! . About me . 코드스테이트 AIbootcamp 수료 중 . Pandas . Machine Learning . Deep Learning .",
          "url": "https://gwonchankim.github.io/channee/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Sample",
          "content": "안녕 세상!! . 안녕! | 안녕! | 안녕! | .",
          "url": "https://gwonchankim.github.io/channee/sample/",
          "relUrl": "/sample/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gwonchankim.github.io/channee/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}